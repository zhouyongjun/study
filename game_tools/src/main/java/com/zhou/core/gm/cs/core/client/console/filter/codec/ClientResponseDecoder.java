package  com.zhou.core.gm.cs.core.client.console.filter.codec;import org.apache.mina.core.buffer.IoBuffer;import org.apache.mina.core.session.IoSession;import org.apache.mina.filter.codec.CumulativeProtocolDecoder;import org.apache.mina.filter.codec.ProtocolDecoderOutput;import com.zhou.core.gm.cs.buffer.GmIoBuffer;import com.zhou.core.gm.cs.log.GmLog;	/**	 * 解码器 解析客户端上发数据	 * @author zhouyongjun	 *	 */public class ClientResponseDecoder extends CumulativeProtocolDecoder {	    	@Override	protected boolean doDecode(IoSession session, IoBuffer buffer,ProtocolDecoderOutput output) throws Exception {		//获取类型		try {//			GmLog.info("do decode session : "+ session);//			GmLog.info("do decode remaining : "+ buffer.remaining()+"\t limit :" +buffer.limit());			int start = buffer.position();			int needLength = buffer.getInt();			int limit = buffer.limit();			if (limit < needLength) {				GmLog.info("gm response decoder request session["+session+"] position["+start+"] remaining["+buffer.remaining()+"] limit["+limit+"] < needLength["+needLength+"],error...");				buffer.position(limit);				return false;			}			IoBuffer newBuffer = IoBuffer.allocate(limit-4);		    newBuffer.put(buffer);		    newBuffer = newBuffer.flip();		    buffer.position(limit);//			GmLog.debug("do decode before remaining : "+ buffer.remaining()+",\t limit :" +buffer.limit());			//解析			GmIoBuffer gmBuffer = new GmIoBuffer(newBuffer);			output.write(gmBuffer);		} catch (Exception e) {			GmLog.error(e.getMessage(),e);		}		return true;	}}